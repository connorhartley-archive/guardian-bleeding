buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'net.sf.proguard:proguard-gradle:5.3.3'
        classpath 'com.puppycrawl.tools:checkstyle:7.6.1'
    }
}

plugins {
    id 'java'
    id 'idea'
    id 'eclipse'
    id 'signing'
    id 'ninja.miserable.blossom' version '1.0.1'
    id 'org.spongepowered.plugin' version '0.8.1'
    id 'com.github.hierynomus.license' version '0.14.0'
    id 'com.github.johnrengelman.shadow' version '2.0.0'
}

defaultTasks 'licenseFormat', 'build'

group = pluginGroup
version = "${spongeVersion}-${pluginVersion}-${pluginPatch}"

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
    maven { url 'https://jitpack.io' }
    maven { url 'https://repo.bstats.org/content/groups/public/' }
    maven { url 'http://repo.drnaylor.co.uk/artifactory/list/minecraft' }
}

dependencies {
    compile project(':guardian-api')

    compile "org.spongepowered:spongeapi:${spongeVersion}-SNAPSHOT"

    // External Dependencies

    compile 'com.github.me4502:Precogs:04c53049ea'
    compile 'com.github.ichorpowered:elderguardian:-SNAPSHOT'

    // Shaded Dependencies

    compile 'org.apache.commons:commons-math3:3.6.1'
    compile 'com.github.me4502:ModularFramework:35dc605747'
    compile 'org.bstats:bstats-sponge-lite:1.1'

    compile 'tech.ferus.util:ConfigKeys:1.0.3'
    compile 'tech.ferus.util:basicsql-h2:2.0.1'
    compile 'tech.ferus.util:basicsql-mysql:2.0.1'

    // Compatibility Dependencies

    compile 'io.github.nucleuspowered:nucleus-api:0.29.3-SNAPSHOT-S6.0'
}

signing {
    required false
    sign configurations.archives
}

blossom {
    def location = 'src/main/java/com/ichorpowered/guardian/PluginInfo.java'

    replaceToken '@id@', project.pluginId, location
    replaceToken '@name@', project.pluginName, location
    replaceToken '@version@', version, location
    replaceToken '@description@', project.pluginDescription, location
    replaceToken '@databaseversion@', project.databaseVersion, location
    replaceToken '@elderversion@', project.elderVersion, location
    replaceToken '@precogsversion@', project.precogsVersion, location
}

license {
    header = file('LICENSE.txt')
    include '**/*.java'

    ignoreFailures = false
    strictCheck = true

    mapping {
        java = 'SLASHSTAR_STYLE'
    }
}

shadowJar {
    classifier = 'unminified'
    dependencies {
        include(project(':guardian-api'))
        include(dependency('org.apache.commons:commons-math3:3.6.1'))

        relocate ('com.mchange', 'com.ichorpowered.guardian.relocate.com.mchange') {
            include(dependency('com.mchange:c3p0'))
            include(dependency('com.mchange:mchange-commons-java'))
        }

        relocate ('tech.ferus.util.sql', 'com.ichorpowered.guardian.relocate.tech.ferus.util.basicsql') {
            include(dependency('tech.ferus.util:basicsql-h2'))
            include(dependency('tech.ferus.util:basicsql-mysql'))
        }

        relocate ('tech.ferus.util.config', 'com.ichorpowered.guardian.relocate.tech.ferus.util.config') {
            include(dependency('tech.ferus.util:ConfigKeys'))
        }

        relocate ('com.me4502.modularframework', 'com.ichorpowered.guardian.relocate.com.github.me4502.modularframework') {
            include(dependency('com.github.me4502:ModularFramework'))
            exclude 'com.me4502.modularframework.ModularFramework'
        }

        relocate ('org.bstats', 'com.ichorpowered.guardian.relocate.org.bstats.spongelite') {
            include(dependency('org.bstats:bstats-sponge-lite'))
        }
    }
    exclude 'GradleStart**'
    exclude '.cache'
    exclude 'LICENSE.txt'
    exclude 'com/me4502/modularframework/ModularFramework.class'
}
shadowJar.dependsOn([':guardian-api:build'])

task minifyShadedJar(type: ProGuardTask, group: 'Build', description: 'Minifies the shaded JAR.') {
    def shadedFile = shadowJar.archivePath
    def minifiedFile = file(shadedFile.path.replaceFirst('-unminified', ''))

    injars shadedFile
    outjars minifiedFile

    libraryjars files(configurations.runtime.collect())
    libraryjars file("${System.getProperty('java.home')}/lib/rt.jar")

    dontoptimize
    dontobfuscate
    dontwarn

    keepattributes 'Signature, InnerClasses, Annotation'
    keep "class !com.github.me4502.**,com.ichorpowered.guardian.** { *; }"
}

task copyJars(type: Copy, dependsOn: ':guardian-api:build') {
    from([subprojects.shadowJar, subprojects.javadocJar, shadowJar], tasks.minifyShadedJar.outJarFiles)
    into project.file('output')
}

artifacts {
    tasks.minifyShadedJar.outJarFiles.each {
        archives it
    }

    archives shadowJar
}

model {
    tasks.signArchives {
        dependsOn tasks.minifyShadedJar
    }
}

class ProGuardTask extends proguard.gradle.ProGuardTask {
    def keepclass(String className) {
        keep "class ${className},${className}\$* { *; }"
    }
}

tasks.minifyShadedJar.dependsOn(shadowJar)

build.dependsOn(copyJars)
build.dependsOn(shadowJar)
build.dependsOn(minifyShadedJar)